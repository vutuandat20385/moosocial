<?phpApp::import('Lib/SocialIntegration', 'ProviderModelOAuth2');class SocialIntegration_Providers_Yahoo extends SocialIntegration_Provider_Model_OAuth2 {    /**     * {@inheritdoc}     */    public $scope = 'r_basicprofile r_emailaddress';    public $state = 'DCEeFWf45A53sdfKef421';    public $request_url = 'https://social.yahooapis.com/v1/';        function initialize() {        parent::initialize();        // Provider api end-points        $this->api->api_base_url = "https://api.login.yahoo.com/";        $this->api->authorize_url = "https://api.login.yahoo.com/oauth2/request_auth";        $this->api->token_url = "https://api.login.yahoo.com/oauth2/get_token";    }    /**     * begin login step      */    function loginBegin() {        SocialIntegration_Auth::redirect($this->api->authorizeUrl(array("response_type" => "code")));    }    /**	* finish login step	*/    function loginFinish(){		$error = (array_key_exists('error',$_REQUEST))?$_REQUEST['error']:"";		// check for errors		if ( $error ){ 			throw new Exception( "Authentication failed! {$this->providerId} returned an error: $error", 5 );		}		// try to authenticate user		$code = (array_key_exists('code',$_REQUEST))?$_REQUEST['code']:"";		try{			$this->api->authenticate( $code ); 		}		catch( Exception $e ){			throw new Exception( "User profile request failed! {$this->providerId} returned an error: $e", 6 );		}		// check if authenticated		if ( ! $this->api->access_token ){ 			throw new Exception( "Authentication failed! {$this->providerId} returned an invalid access token.", 5 );		}		// store tokens		$this->token( "access_token" , $this->api->access_token  );		$this->token( "refresh_token", $this->api->refresh_token );		$this->token( "expires_in"   , $this->api->access_token_expires_in );		$this->token( "expires_at"   , $this->api->access_token_expires_at );                $this->token( "expires_at"   , $this->api->access_token_expires_at );		// set user connected locally		$this->setUserConnected();    }        /**     * {@inheritdoc}     */    function getUserProfile() {        $userId = $this->getCurrentUserId();        $parameters = array();        $parameters['format'] = 'json';        $response = $this->api->get('user/' . $userId . '/profile', $parameters);        if (!isset($response->profile)) {            throw new Exception("User profile request failed! {$this->providerId} returned an invalid response.", 6);        }        $data = $response->profile;        $this->user->profile->identifier = (property_exists($data, 'guid')) ? $data->guid : "";        $this->user->profile->firstName = (property_exists($data, 'givenName')) ? $data->givenName : "";        $this->user->profile->lastName = (property_exists($data, 'familyName')) ? $data->familyName : "";        $this->user->profile->displayName = (property_exists($data, 'nickname')) ? trim($data->nickname) : "";        $this->user->profile->profileURL = (property_exists($data, 'profileUrl')) ? $data->profileUrl : "";        $this->user->profile->gender = (property_exists($data, 'gender')) ? $data->gender : "";        if ($this->user->profile->gender == "F") {            $this->user->profile->gender = "female";        }        if ($this->user->profile->gender == "M") {            $this->user->profile->gender = "male";        }        if (isset($data->emails)) {            $email = "";            foreach ($data->emails as $v) {                if (isset($v->primary) && $v->primary) {                    $email = (property_exists($v, 'handle')) ? $v->handle : "";                    break;                }            }            $this->user->profile->email = $email;            $this->user->profile->emailVerified = $email;        }        $this->user->profile->age = (property_exists($data, 'displayAge')) ? $data->displayAge : "";        $this->user->profile->photoURL = (property_exists($data, 'image')) ? $data->image->imageUrl : "";        $this->user->profile->address = (property_exists($data, 'location')) ? $data->location : "";        $this->user->profile->language = (property_exists($data, 'lang')) ? $data->lang : "";        return $this->user->profile;    }    /**     * {@inheritdoc}     */    function getUserContacts() {        $userId = $this->getCurrentUserId();               $parameters = array();        $parameters['format'] = 'json';        $parameters['count'] = 'max';        $url = $this->request_url . 'user/' . $userId . '/contacts';                $response = $this->api->api($url, 'GET', $parameters);               if ($this->api->http_code != 200) {            throw new Exception('User contacts request failed! ' . $this->providerId . ' returned an error: ' . $this->errorMessageByStatus($this->api->http_code));        }        if (!$response->contacts->contact && ( $response->errcode != 0 )) {            return array();        }        $contacts = array();        $key_temp = 0;        foreach ($response->contacts->contact as $item) {            // $uc = new SocialIntegration_User_Contact();            $em = $this->selectEmail($item->fields);            if (!empty($em)) {                $contacts[$key_temp]['id'] = $this->selectGUID($item);                $contacts[$key_temp]['email'] = $this->selectEmail($item->fields);                $ct_name = $this->selectName($item->fields);                if (!empty($ct_name)) {                    $contacts[$key_temp]['name'] = $ct_name;                } else {                    $contacts[$key_temp]['name'] = $em;                }                $contacts[$key_temp]['picture'] = $this->selectPhoto($item->fields);                //$contacts[] = $uc;                $key_temp++;            }        }        return $contacts;    }    /**     * {@inheritdoc}     */    function setUserStatus($status) {        $parameters = array();        $private = true; // share with your connections only        if (is_array($status)) {            if (isset($status[0]) && !empty($status[0]))                $parameters["title"] = $status[0]; // post title            if (isset($status[1]) && !empty($status[1]))                $parameters["comment"] = $status[1]; // post comment            if (isset($status[2]) && !empty($status[2]))                $parameters["submitted-url"] = $status[2]; // post url            if (isset($status[3]) && !empty($status[3]))                $parameters["submitted-image-url"] = $status[3]; // post picture url            if (isset($status[4]) && !empty($status[4]))                $private = $status[4]; // true or false        }        else {            $parameters["comment"] = $status;        }        try {            $response = $this->api->share('new', $parameters, $private);        } catch (LinkedInException $e) {            throw new Exception("Update user status update failed!  {$this->providerId} returned an error: $e");        }        if (!$response || !$response['success']) {            throw new Exception("Update user status update failed! {$this->providerId} returned an error.");        }        return $response;    }    /**     * load the user latest activity     *    - timeline : all the stream     *    - me       : the user activity only     * {@inheritdoc}     */    function getUserActivity($stream) {        try {            if ($stream == "me") {                $response = $this->api->updates('?type=SHAR&scope=self&count=25');            } else {                $response = $this->api->updates('?type=SHAR&count=25');            }        } catch (LinkedInException $e) {            throw new Exception("User activity stream request failed! {$this->providerId} returned an error: $e");        }        if (!$response || !$response['success']) {            return array();        }        $updates = new SimpleXMLElement($response['linkedin']);        $activities = array();        foreach ($updates->update as $update) {            $person = $update->{'update-content'}->person;            $share = $update->{'update-content'}->person->{'current-share'};            $ua = new Hybrid_User_Activity();            $ua->id = (string) $update->id;            $ua->date = (string) $update->timestamp;            $ua->text = (string) $share->{'comment'};            $ua->user->identifier = (string) $person->id;            $ua->user->displayName = (string) $person->{'first-name'} . ' ' . $person->{'last-name'};            $ua->user->profileURL = (string) $person->{'site-standard-profile-request'}->url;            $ua->user->photoURL = null;            $activities[] = $ua;        }        return $activities;    }            function select($vs, $t) {        foreach ($vs as $v) {            if ($v->type == $t) {                return $v;            }        }        return NULL;    }    function selectGUID($v) {        return (property_exists($v, 'id')) ? $v->id : "";    }    function selectName($v) {        $s = $this->select($v, 'name');        if (!$s) {            $s = $this->select($v, 'nickname');            return ($s) ? $s->value : "";        } else {            return ($s) ? $s->value->givenName . " " . $s->value->familyName : "";        }    }    function selectNickame($v) {        $s = $this->select($v, 'nickname');        return ($s) ? $s : "";    }    function selectPhoto($v) {        $s = $this->select($v, 'guid');        return ($s) ? (property_exists($s, 'image')) : "";    }    function selectEmail($v) {        $s = $this->select($v, 'email');        return ($s) ? $s->value : "";    }        public function getCurrentUserId() {             $this->refreshToken();        $parameters = array();        $parameters['format'] = 'json';              $url = $this->request_url . 'me/guid';               $response = $this->api->api($url, 'GET', $parameters);               if (!isset($response->guid->value)) {            throw new Exception("unauthorized");        }        return $response->guid->value;    }}